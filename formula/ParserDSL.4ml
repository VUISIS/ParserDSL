domain SimpleTarParser
{
  Header ::= new (name: Integer, size: Integer).
  Offset ::= new (name: Integer, pos: Integer).
  Start  ::= new (name: Integer).
  Done  ::= new (name: Integer, seq: Integer).

  Done(nextName, 0) :- s is Start(currName), 
                          currHeader is Header(currName, size),
                          currOffset is Offset(currName, pos),
                          nextPos = pos + size + 512,
                          nextOffset is Offset(nextName, nextPos).
                          
  Done(nextName, nextSeq) :- s is Done(currName, seq), nextSeq = seq + 1,
                          currHeader is Header(currName, size),
                          currOffset is Offset(currName, pos),
                          nextPos = pos + size + 512,
                          nextOffset is Offset(nextName, nextPos).

  badHeader :- h is Header, h.size < 0.

  // Must have exactly one StartHeader
  tooManyDone :- h is Header, name = h.name,
                    count({d | d is Done(name, _)}) > 1. 
  
  // conforms no tooManyDone, no badHeader.
}

partial model pm of SimpleTarParser
[solver_RecursionBound = 5]
{
  h1 is Header(100, 512).
  h1Offset is Offset(100, 0).
  Start(100).
  
  h2 is Header(101, x).
  h2Offset is Offset(101, 1024).
}

// A parser domain with dependent data types and intermediate results
domain GenericDataParser {
    // Define constants for parsing status
    Status ::= {INIT, READ, UPDATE, DONE}.

    // A byte represented as an integer in the range of 0-255.
    Byte ::= new (val: Natural).
    Bytes ::= new (item: Byte, nxt: any Bytes + { NULL }).
    // Input data are bytes represented as a list of Byte.
    InputData ::= new (name: String, data: Bytes).

    // Parsing state that the includes the input data, status, current position, and offset.
    State ::= new (inputData: InputData, status: Status, curPos: Natural, offset: Natural).

    // Intermediate results that are derived during parsing and the derived result could have my types.
    IntermediateResult ::= new (name: String, context: State, derivedResult: String + Natural).

    // Decide the new offset and pos based on current state.
    NextOffset ::= new (state: State, offset: Natural).
    NextPos ::= new (state: State, pos: Natural).

    // Derived constants to check parsing conditions
    canReadMore :- State(InputData(_, data), READ, pos, offset), 
        length = lstLength(#Bytes, data), pos + offset < length.

    // Rule to move to done state
    State(inputData, DONE, pos, offset) :-
        inputData is InputData(_, data),
        State(inputData, READ, pos, offset), 
        length = lstLength(#Bytes, data),
        offset + pos >= length.

    isDone :- State(_, DONE, _, _).

    // Rule to initialize the parser with no intermediate results, but you can add them as needed.
    State(initData, INIT, 0, 0) :- initData is InputData(_, data). // Change this logic as needed

    // Rule to initialize the parsing and can be used to read the initial header or meta info.
    // TODO: Change this logic as needed
    State(inputData, READ, pos, offset) :- State(inputData, INIT, 0, 0),
        pos = 0, offset = 1. 

    // TODO: Change this logic as needed
    NextOffset(state, newOffset), IntermediateResult("num", state, newOffset) :- 
        inputData is InputData(_, data),
        state is State(inputData, READ, 0, offset), 
        // TODO: Convert a byte from ASCII format to integer.
        asciiVal = lstGetAt(#Bytes, data, 0).val,
        newOffset = asciiVal.

    // TODO: Change this logic as needed
    NextPos(state, result) :- 
        state is State(inputData, READ, 0, offset), 
        result = offset.

    // Rule to read the next block of data and the status is READ
    State(inputData, READ, newPos, newOffset) :-
        state is State(inputData, READ, pos, offset), 
        NextPos(state, newPos),
        NextOffset(state, newOffset),
        canReadMore.
    
    // Rule to update intermediate results from current read and the new status is UPDATE
    IntermediateResult(name, newState, newDerivedResult) :-
        inputData is InputData(_, data),
        state is State(inputData, READ, pos, offset), 
        IntermediateResult(name, state, derivedResult),
        newState = State(inputData, UPDATE, pos, offset),
        curRead = toNatural(lstGetAt(#Bytes, data, pos + offset)),
        newDerivedResult = derivedResult + curRead. // Change this logic as needed
    
    // Rule to derive intermediate result from other intermediate results
    IntermediateResult(name, newState, newDerivedResult) :-
        inputData is InputData(_, data),
        state is State(inputData, _, pos, offset), // It can be a context in any status
        IntermediateResult(name, state, oldDerivedResult),
        newState = State(inputData, UPDATE, pos, offset), 
        newDerivedResult = oldDerivedResult + 1. // Change this logic as needed
}

model m of GenericDataParser {
    // The first number decides how many numbers to read next and will return the sum.
    // The number is separated by '+' and the expression is separated by '#'.
    // Example: "3#1+2+3#" 
    // "51(3) 35(#) 49(1) 43(+) 50(2) 43(+) 51(3) 35(#)" in ASCII format
    inputData is InputData("sample", 
        Bytes(Byte(51), 
            Bytes(Byte(35), 
                Bytes(Byte(49), 
                    Bytes(Byte(43), 
                        Bytes(Byte(50),
                            Bytes(Byte(43),
                                Bytes(Byte(51), 
                                    Bytes(Byte(35), NULL))))))))).

    initState is State(inputData, INIT, 0, 0). 
    initSum is IntermediateResult("sum", initState, 0).
}

partial model pm2 of GenericDataParser
[solver_RecursionBound = 5]
{
    InputData("sample", x).
}