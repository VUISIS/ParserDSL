domain TarParser extends GenericDataParser at "ParserDSL.4ml" {
    // The initial value of in_block is 0.
    IntermediateResult("in_block", state, 0) :- 
        state is State(inputData, INIT, 0, 0).

    // Set `in_block` to 1 at the end of reading the header block if not interrupted.
    IntermediateResult("in_block", state, 1) :- 
        state is State(inputData, _, _, _),
        IntermediateResult("in_block", state, 0),
        IntermediateResult("size", state, sizeVal),
        sizeVal = 0.

    // Reset `in_block` to 0 when the size is 0 indicating the end of file is reached and the next block is header again.
    IntermediateResult("in_block", state, 0) :- 
        state is State(inputData, _, _, _),
        IntermediateResult("in_block", state, 1),
        IntermediateResult("size", state, sizeVal),
        sizeVal = 0.

    // Define constants for tar file types
    // FileType ::= {PLAIN, LINK, DIRECTORY, SYMLINK, CHARDEV, BLOCKDEV, FIFO, UNKNOWN}.
    // TARFILETYPEOFFSET = 156.
    // Rule to determine file type based on header
    IntermediateResult("directory", state, 0), 
    IntermediateResult("files", state, newFilesVal) :-
        state is State(inputData, READ, pos, offset),
        IntermediateResult("files", state, filesVal),
        newFilesVal = filesVal + 1,
        IntermediateResult("in_block", state, inBlockVal),
        inBlockVal = 0,
        Byte(inputData, typeByte, pos + 156),
        typeByte = 77. // ASCII value for 'M'

    IntermediateResult("directory", state, 1) :-
        state is State(inputData, READ, pos, offset),
        IntermediateResult("in_block", state, inBlockVal),
        inBlockVal = 0,
        Byte(inputData, typeByte, pos + 156),
        typeByte = 86. // ASCII value for 'V'

    IntermediateResult("directory", state, 0), 
    IntermediateResult("skipEntry", state, 1) :-
        state is State(inputData, READ, pos, offset),
        IntermediateResult("in_block", state, inBlockVal),
        inBlockVal = 0,
        Byte(inputData, typeByte, pos + 156),
        typeByte = 88. // ASCII value for 'X'

    // Default case for unknown file types
    IntermediateResult("fileType", state, "UNKNOWN") :-
        state is State(inputData, READ, pos, offset),
        IntermediateResult("in_block", state, inBlockVal),
        inBlockVal = 0,
        Byte(inputData, typeByte, pos + 156),
        typeByte != 77,
        typeByte != 86,
        typeByte != 88.
    
    IntermediateResult("size", state, sizeVal) :-
        state is State(inputData, _, pos, offset),
        // TODO: Start at pos + 156, read the next 12 bytes and combine them to form a size.
        Byte(inputData, b1, pos + 156),
        Byte(inputData, b2, pos + 157),
        Byte(inputData, b3, pos + 158),
        // TODO: temporarily set it to a negative value or positive value for testing.
        //sizeVal = 1000.
        sizeVal = b1*b2*b3.

    IntermediateResult("nskip", state, nskipVal) :- 
        state is State(inputData, _, pos, offset),
        IntermediateResult("size", state, sizeVal),
        // TODO: Implement a function to handle `size` to `nskip` conversion.
        nskipVal = sizeVal.

    // Increment skipEntry if the size is less than 0.
    IntermediateResult("skipEntry", state, newSkipEntryVal) :-
        state is State(inputData, READ, pos, offset),
        IntermediateResult("in_block", state, inBlockVal),
        inBlockVal = 0,
        IntermediateResult("size", state, sizeVal),
        sizeVal < 0,
        IntermediateResult("skipEntry", state, skipEntryVal),
        newSkipEntryVal = skipEntryVal + 1,
        Byte(inputData, typeByte, pos + 156),
        typeByte = 88. // ASCII value for 'X'

    // TODO: Model the following code: block = fmap_need_off_once_len(*ctx->fmap, pos, BLOCKSIZE, &nread); 
    // TODO: nread is the length of remaining data in a block and could be less than 512.
    IntermediateResult("nread", state, nreadVal) :- 
        inputData is InputData(_, _, length),
        state is State(inputData, _, pos, offset),
        pos + offset < length,
        nreadVal = 512.

    IntermediateResult("nread", state, nreadVal) :- 
        inputData is InputData(_, _, length),
        state is State(inputData, _, pos, offset),
        pos + offset >= length,
        nreadVal = (pos + offset) % 512.

    // Not all overreads are errors, some are expected.
    hasOverRead :- OverRead(state).

    // Rule to handle checksum validation, won't continue if the checksum is not valid.
    //ContinueCondition(state) :- 
        //state is State(inputData, _, pos, offset),
        // TODO: Start at pos + 148, read the next 8 bytes and combine them to form a checksum.
        // TODO: Implement a checksum calculation function that takes the whole block as input.
        //Byte(inputData, checksumByte, pos + 148),
        // TODO: Loosen the requirement to simplify the logic or temporarily assume the checksum is valid.
        //checksumByte > 0.

    // Rule to skip entries based on file type
    //ContinueCondition(state) :- 
        //state is State(inputData, _, pos, offset),
        //IntermediateResult("fileType", state, fileType),
        //fileType != "UNKNOWN".
    
    ContinueCondition(state) :- CanReadMore(state).

    // Rule to update position and offset for next block
    // pos will be affected by `nskip` under some conditions. pos += nskip.
    NextPos(state, newPos) :- 
        state is State(inputData, _, pos, offset), 
        //newPos = pos + 100.
        IntermediateResult("nskip", state, nskipVal),
        newPos = pos + offset + nskipVal.

    // It could be less than 512 depending on the value of nread.
    NextOffset(state, newOffset) :- 
        state is State(inputData, _, pos, offset), 
        newOffset = 512.
        //IntermediateResult("nread", state, nreadVal), 
        // TODO: Can nreadVal be negative?
        //newOffset = toNatural(nreadVal).
}

// Commands for symbolic execution of a partial TarParser model.
// 1. Find a model that `isDone` condition cannot be satisfied.
// solve pm 1 no isDone
// 2. Find a model that has overread.
// solve pm 1 overread
partial model tpm of TarParser
[solver_RecursionBound = 5]
{
    inputData is InputData("sample", x, 10000).
    initState is State(inputData, INIT, 0, 0).

    // TODO: Does not work unless you explicitly specify all partial terms.
    // requires atleast 10000 Byte.
    // requires atleast 100 NextPos.
    // requires atleast 100 NextOffset.

    NextPos(s1, p1),
    NextOffset(s1, o1),
    NextPos(s2, p2),
    NextOffset(s2, o2),
    NextPos(s3, p3),
    NextOffset(s3, o3).

    Byte(inputData,b1,0), 
    Byte(inputData,b2,1), 
    Byte(inputData,b3,2), 
    Byte(inputData,b4,3), 
    Byte(inputData,b5,4),
    Byte(inputData,b6,5),
    Byte(inputData,b7,6), 
    Byte(inputData,b8,7), 
    Byte(inputData,b9,8),
    Byte(inputData,b10,9), 
    Byte(inputData,b11,10).
}